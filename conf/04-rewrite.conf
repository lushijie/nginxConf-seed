
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  text/plain;
    charset       utf-8;

    sendfile        on;
    #tcp_nopush     on;
    #keepalive_timeout  0;
    keepalive_timeout  65;

    rewrite_log on; #打开rewrite-log，开启时error——log中记录notice级别的重写日志
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
    #gzip  on;

    #last break redirect  permant
    server {
        listen       80;
        server_name  localhost;

        #nginx的重写模块是一个简单的正则表达式匹配，依赖于PCRE库，因此需要安装pcre。


########################################【rewrite 的 redirect与permanent】#############################################
        # location ^~ /aaa {
        #     if ($is_args) {#注意空格
        #         rewrite ^/aaa(.*) /bbb$1 redirect;
        #     }
        #     rewrite ^/aaa(.*) /bbb$1 permanent;
        # }
        # location ^~ /bbb {
        #   #rewrite ^/bbb(.*) /aaa$1 last; #重试location匹配，超过10次匹配不到报错误
        #   if ($is_args) {
        #         echo "302 redirect page";
        #   }
        #   echo "301 permanent page";
        # }

        # http://120.27.105.225/aaa            permanent page
        # http://120.27.105.225/bbb?a=123      redirect page
        # # rewrite redirect –    返回302临时重定向，地址栏显示重定向后的url，爬虫不会更新url（因为是临时）
        # # rewrite permanent –   返回301永久重定向, 地址栏显示重定向后的url，爬虫更新url

#########################################【server中的rewrite的flag的作用】#####################################

        #rewrite ^/ccc(.*) /ddd$1 break;
        #rewrite ^/ccc(.*) /ddd$1 last;
        # rewrite ^/ccc(.*) /ddd$1;

        # location ^~ /ddd {
        #   echo "ddd page";
        # }

        #http://120.27.105.225/ccc  break与last还有留空 全部输出servertest page

        #结论 #server中的rewrite break和last和留空没什么区别，都会去匹配location


#######################################【server中的rewrite的执行优先级】####################################

        # rewrite ^/server(.*) /serverrewrite$1 last; #last与break作用相同

        # location ^~ /servertest {
        #   echo "servertest page";
        # }

        # location ^~ /serverrewrite {
        #   echo "serverewrite page";
        # }

        #http://120.27.105.225/servertest 输出serverewrite page
        #将rewrite移动到末尾  #http://120.27.105.225/servertest 依然输出serverewrite page

        #结论
        #rewite在server块下，会优先执行rewrite部分，然后才会去匹配location块



##############################################【alias中只能使用last】#######################################################

        # location ^~ /static {
        #     alias /home/www.test.com/static/;
        #     rewrite ^/static(.*) /test$1 last; #使用break 错误
        # }

        # location ^~ /test {
        #     echo "test page";
        # }

        #http://120.27.105.225/static/abc  last  ->  test page
        #http://120.27.105.225/static/abc  break  ->  test page 500 Internal Server Error
        #???http://120.27.105.225/static/a.gif why??? /test/a.gif

        #结论
        #使用alias指定源：必须使用last
        # 如果location中rewrite后是对静态资源的请求，不需要再进行其他匹配，一般要使用break或不写

#######################################【location块中的break与last】################################################
        location ^~ /eee {
          rewrite ^/eee(.*) /fff$1 last;#last与空
          echo "eee page";
          #content_by_lua 'ngx.say("hello")';
                      # if ($http_user_agent ~ Chrome) {#if创建了一个无名的location
                      #  echo "chrome";
                      #   #rewrite注释掉输出 chrome
                      # }
        }
        location ^~ /fff {
          echo "fff page";
        }

        #http://120.27.105.225/eee                         输出 eee page
        #把/eee/里的echo 指令注释  http://120.27.105.225/eee  输出 404
        #rewrite ^/eee(.*) /fff$1 last与空                  输出fff page

        #info tail -f error.log

        #结论：
        #rewrite break  url重写后，直接使用当前资源，【完成本次请求】，地址栏url不变

        #/eee/里的echo 指令未注释情况下,虽然/eee/xx被重定向到/fff/xx,
        #但是break指令不会重新开启一个新的请求继续匹配，
        #所以nginx是不会匹配到下面的/fff/这个location；
        #但是并继续执行本请求的其他阶段【!】
        #对于/eee 对应的content阶段的输出为 echo “eee page”;
        #(content阶段，可以简单理解为产生数据输出的阶段，如返回静态页面内容也是在content阶段；
        # echo指令也是运行在content阶段，一般情况下content阶段只能对应一个输出指令)；

        #/eee/里的echo 指令注释的情况下，然后再次访问/eee/xx会报404，
        #/eee/ 这location里只能执行nginx默认的content指令，
        #即尝试找/fff/xx这个html页面并输出起内容，事实上，这个页面不存在，所以会报404的错误。

        #如果location中rewrite后是对静态资源的请求，不需要再进行其他匹配，一般要使用break

################################################【if语句与break】#######################################################

        # if ($uri ~ abc) { #uri中包含abc
        #     #break; 404
        #     echo 'home';# "echo" directive is not allowed here
        #     #rewrite ^(.*)$ /goto/$1 break;
        #     rewrite ^(.*)$ /goto/$1 last;
        # }

        # location ^~ /goto {
        #     echo 'abc';
        # }

        # 一个变量名；false如果这个变量是空字符串或者以0开始的字符串；
        # 使用= ,!= 比较的一个变量和字符串
        # 是用~， ~*与正则表达式匹配的变量，如果这个正则表达式中包含}，;则整个表达式需要用" 或' 包围
        # 使用-f ，!-f 检查一个文件是否存在
        # 使用-d, !-d 检查一个目录是否存在
        # 使用-e ，!-e 检查一个文件、目录、符号链接是否存在
        # 使用-x ， !-x 检查一个文件是否可执行

        #http://120.27.105.225/abc       break 与 last全部输出 abc

        #if语句主要用来判断一些在rewrite语句中无法直接匹配的条件,比如检测文件存在与否,http header,cookie等
        # break语句，放在server块rewrite语句前面,如果是直接请求某个真实存在的文件,则用break语句停止rewrite检查

        #If Is Evil
        #https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/
        #http://www.ialloc.org/posts/2015/07/28/ngx-notes-http-evil-if-1/?utm_source=tuicool

    }
}
