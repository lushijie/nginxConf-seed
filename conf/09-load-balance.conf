#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
#####################################【负载均衡默认方式】##################################################
    #1.轮询（默认）
    # 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
    upstream a.proxy.com {
        server  192.168.5.126:80;
        server  192.168.5.27:80;
    }


#####################################【负载均衡weight方式】##################################################
    #2.weight
    #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。
    upstream b.proxy.com {
        server  192.168.5.126:80 weight=5;
        server  192.168.5.27:80 weight=2;
    }

#####################################【负载均衡ip_hash方式】##################################################
    #3.ip_hash
    #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
    #可以解决session的问题???
    upstream c.proxy.com {
        ip_hash;
        server  192.168.5.126:80;
        server  192.168.5.27:80;
    }


#####################################【负载均衡fair方式】##################################################
    #4.fair（第三方）nginx-upstream-fair
    # 按后端服务器的响应时间来分配请求，响应时间短的优先分配。
    upstream d.proxy.com {
        server  192.168.5.126:80;
        server  192.168.5.27:80;
        fair;
    }


#####################################【负载均衡配置方式举例】##################################################
    #tips:定义负载均衡设备的Ip及设备状态
    upstream f.proxy.com {
        ip_hash;
        server 127.0.0.1:9090 down;
        server 127.0.0.1:8080 weight=2;
        server 127.0.0.1:6060;
        server 127.0.0.1:7070 backup;
    }

    # 在需要使用负载均衡的server中增加
    # proxy_pass http://bakend/;
    # 每个设备的状态设置为:
    # 1.down表示单前的server暂时不参与负载
    # 2.weight为weight越大，负载的权重就越大。
    # 3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误
    # 4.fail_timeout:max_fails次失败后，暂停的时间。
    # 5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。
    # nginx支持同时设置多组的负载均衡，用来给不用的server来使用。

    # client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug
    # client_body_temp_path设置记录文件的目录 可以设置最多3层目录
    # location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡


    server{
        listen 80;
        server_name a.com;
        location / {
            proxy_pass         http://a.proxy.com; 
            # 以上三行，目的是将代理服务器收到的用户的信息传到真实服务器上
            proxy_set_header   Host             $host; 
            proxy_set_header   X-Real-IP        $remote_addr; 
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for; 
        } 
    }

}
